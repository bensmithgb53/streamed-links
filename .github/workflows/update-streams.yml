name: Update Streams JSON

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch: # Manual trigger

permissions:
  contents: write # Allow writing to repo

jobs:
  update-streams:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm install puppeteer
      - name: Generate streams.json
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          (async () => {
            console.log('Launching browser...');
            const browser = await puppeteer.launch({ headless: 'new', args: ['--no-sandbox'] });
            const page = await browser.newPage();

            // Set User-Agent to mimic a real browser
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36');

            // Fetch all matches
            console.log('Fetching matches...');
            await page.goto('https://streamed.su');
            const matches = await page.evaluate(async () => {
              const response = await fetch('https://streamed.su/api/matches/all', {
                headers: { 'User-Agent': 'Mozilla/5.0' }
              });
              return response.json();
            });
            console.log('Matches fetched:', matches.length);

            // Filter live matches (within last 24 hours)
            const currentTime = Math.floor(Date.now() / 1000);
            const liveMatches = matches.filter(m => m.date / 1000 >= currentTime - 86400);
            console.log('Live matches:', liveMatches.length);

            // Fetch m3u8 URLs for each match and source
            const streamPromises = liveMatches.flatMap(match => {
              console.log('Processing match:', match.id);
              return match.sources.map(async source => {
                console.log('Fetching stream for source:', source.source, 'id:', match.id);
                try {
                  const m3u8Url = await page.evaluate(async (source, id, streamNo) => {
                    const response = await fetch('https://embedme.top/fetch', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'Referer': 'https://streamed.su/',
                        'Origin': 'https://streamed.su/'
                      },
                      body: JSON.stringify({ source, id, streamNo: '1' })
                    });
                    const enc = await response.text();
                    return 'https://rr.vipstreams.in' + window.decrypt(enc);
                  }, source.source, match.id);
                  return { key: `${match.id}-${source.id}`, value: { matchId: match.id, source: source.source, m3u8_url: m3u8Url } };
                } catch (e) {
                  console.log('Error fetching stream:', e.message);
                  return { key: `${match.id}-${source.id}`, value: { matchId: match.id, source: source.source, m3u8_url: '' } };
                }
              });
            });

            const streamsArray = await Promise.all(streamPromises);
            const streams = streamsArray.reduce((acc, { key, value }) => {
              acc[key] = value;
              return acc;
            }, {});
            console.log('Streams generated:', Object.keys(streams).length);

            // Write streams.json
            require('fs').writeFileSync('streams.json', JSON.stringify(streams, null, 2));
            console.log('streams.json written');

            await browser.close();
          })();
          "
      - name: Commit changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add streams.json || echo "No streams.json to add"
          git commit -m "Update streams.json" || echo "Nothing to commit"
          git push
